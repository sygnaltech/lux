{
  "version": 3,
  "sources": ["../src/page/clinic.ts", "../src/page/services.ts", "../src/routeDispatcher.ts", "../src/site.ts", "../src/version.ts", "../src/index.ts"],
  "sourcesContent": ["\n/*\n * SITE \n * Page | Clinic \n * \n */\n\n// import { TocFix } from \"../tocfix\";\n// import Plyr from 'plyr';\n// // import QRCode from 'qrcode';\n// import { AdjustTrackingUrl } from \"../adjust\";\n// import { AdjustTrackingQr } from \"../adjust-qr\";\n\n//const url: string = 'https://www.sygnal.com?thisisatrackingurlthsfdsfsdsdatdoesstuff';\n\n\nexport class ClinicPage {\n\n    constructor() {\n    }\n    \n    init() {\n\n        /**\n         * Fix links for the ToC \n         */\n\n        // let tocFix = new TocFix();\n        // tocFix.init(); \n\n//         window['fsAttributes'] = window['fsAttributes'] || [];\n//         window['fsAttributes'].push([\n//           'toc',\n//           (tableInstances) => {\n\n//             tocFix.addToCCloseLinks();\n\n// //            console.log('toc Successfully loaded!');\n//           },\n//         ]);\n\n//         /**\n//          * Wire up components embedded\n//          * in Finsweet PRT RTB's\n//          */\n\n//         window['fsAttributes'] = window['fsAttributes'] || []; \n//         window['fsAttributes'].push([  \n//           'richtext',   \n//           (textInstances) => {   \n\n//             this.initAfterFsPRTLib();\n// //            console.log('richtext Successfully loaded!');      \n//           },   \n//         ]);    \n\n\n        // // Look for all links with a [code] attribute\n        // // and apply it to the link's querystring as ?code=VALUE. \n\n        // // Get all links with the 'code' attribute\n        // const links: NodeListOf<HTMLAnchorElement> = document.querySelectorAll('a[code]');\n\n        // links.forEach((link: HTMLAnchorElement) => {\n        //     // Get the value of the 'code' attribute\n        //     const codeValue: string = link.getAttribute('code') || '';\n\n        //     // Use the URL interface to handle the href\n        //     const url: URL = new URL(link.href);\n            \n        //     // Use URLSearchParams to set the code parameter\n        //     url.searchParams.set('code', codeValue);\n\n        //     // Update the link href\n        //     link.href = url.toString();\n        // });\n                    \n    }\n\n}  \n\n    \n    \n    \n    ", "\n/*\n * SITE \n * Page | Services \n * \n */\n\n// import { TocFix } from \"../tocfix\";\n// import Plyr from 'plyr';\n// // import QRCode from 'qrcode';\n// import { AdjustTrackingUrl } from \"../adjust\";\n// import { AdjustTrackingQr } from \"../adjust-qr\";\n\n//const url: string = 'https://www.sygnal.com?thisisatrackingurlthsfdsfsdsdatdoesstuff';\n\n// interface WindowData {\n//     timely_categoryId: string;\n//     timely_productId: string;\n//     sbm_categoryId: string;\n//   }\n  \n//   // Extend the Window interface to include the data property\n//   interface Window {\n//     data: WindowData;\n//   }\n\n  declare function timelyButton(company: string, options: object): void;\n\n//   declare global {\n//     interface Window {\n//         data: WindowData;\n//     }\n// }\n\n\nexport class ServicesPage {\n\n    constructor() {\n    }\n    \n    init() {\n\n        // await loadTimelyScript('//book.gettimely.com/widget/book-button-v1.5.js');\n\n        if (!window.data) {\n            console.error (\"Window.data is not available.\");\n            return;\n        }\n\nconsole.log(\"setting up buttons\")\n\n// Timely\nvar bookingButtonInClinic = new timelyButton('ponsonbydoctors', {\n    // \"location\": \"247844\", \n    \"category\": window.data.timely_categoryId,\n    \"dontCreateButton\": true\n  });  \n\n  var bookingButtonInClinicService = new timelyButton('ponsonbydoctors', {\n    // \"location\": \"247844\", \n    \"category\": window.data.timely_categoryId,\n    \"product\": window.data.timely_productId,\n    \"dontCreateButton\": true\n  });  \n\n  var bookingButtonOnline = new timelyButton('ponsonbydoctors', {\n    // \"location\": \"247844\", \n    \"category\": \"\", // TimelyCategoryIDOnline\n    \"dontCreateButton\": true\n  });         \n\n  var bookingButtonOnlineService = new timelyButton('ponsonbydoctors', {\n    // \"location\": \"247844\", \n    \"category\": \"\", // TimelyCategoryIDOnline\n    \"product\": \"\", // TimelyServiceIDOnline\n    \"dontCreateButton\": true\n  });      \n                 \n  \n\n// Add click event listener to elements with attribute [timely=\"book\"]\nthis.addEventListeners('*[timely=\"book\"]', 'click', function (this: HTMLElement, e: Event) {\n    const categoryId = this.getAttribute('categoryId');\n    const serviceId = this.getAttribute('serviceId');\n    \n    const bookingButton = new timelyButton('ponsonbydoctors', {\n      category: categoryId,\n      service: serviceId,\n      dontCreateButton: true\n    });\n  \n    bookingButton.start();\n  });\n  \n  // Add click event listener to elements with attribute [timely=\"ponsonby\"]\n  this.addEventListeners('*[timely=\"ponsonby\"]', 'click', function () {\n    bookingButtonInClinic.start();\n  });\n  \n  // Add click event listener to elements with attribute [timely=\"ponsonby-service\"]\n  this.addEventListeners('*[timely=\"ponsonby-service\"]', 'click', function () {\n    bookingButtonInClinicService.start();\n  });\n  \n  // Add click event listener to elements with attribute [timely=\"online\"]\n  this.addEventListeners('*[timely=\"online\"]', 'click', function () {\n    bookingButtonOnline.start();\n  });\n  \n  // Add click event listener to elements with attribute [timely=\"online-service\"]\n  this.addEventListeners('*[timely=\"online-service\"]', 'click', function () {\n    bookingButtonOnlineService.start();\n  });\n  \n  // Auto-booking based on URL parameter\n  if (window.location.search.includes('action=book')) {\n    bookingButtonInClinic.start();\n  }\n\n\n\n\n    }\n\n// Utility function to add event listeners to elements\n addEventListeners(selector: string, event: string, handler: (e: Event) => void) {\n  const elements = document.querySelectorAll(selector);\n  elements.forEach(element => {\n    element.addEventListener(event, handler);\n  });\n}\n}  \n\n    \n    \n    \n    ", "/*\n * RISE\n * Main entry point\n * \n */\n\ntype RouteHandler = () => void;\n\nexport interface Routes {\n    [path: string]: RouteHandler;\n}\n\nconst routes: Routes = {\n    '/': () => {\n        console.log('This is the homepage.');\n        // Your function for the homepage\n    },\n    '/about': () => {\n        console.log('This is the about page.');\n        // Your function for the about page\n    },\n    '/contact': () => {\n        console.log('This is the contact page.');\n        // Your function for the contact page\n    },\n    // ... add more routes as needed\n};\n\nexport class RouteDispatcher {\n\n    routes: Routes;\n\n    constructor() {\n//        this.routes = {};\n    }\n\n    matchRoute(path: string): RouteHandler | null {\n        for (const route in this.routes) {\n            if (route.endsWith('*')) {\n                // If the route ends with *, treat it as a wildcard\n                const baseRoute = route.slice(0, -1); // Remove the * from the end\n                if (path.startsWith(baseRoute)) {\n                    return this.routes[route];\n                }\n            } else if (route === path) {\n                // Exact match\n                return this.routes[route];\n            }\n        }\n        return null; // No matching route found\n    }\n    \n    dispatchRoute() {\n        const path = window.location.pathname;\n        const handler = this.matchRoute(path);\n        if (handler) {\n            handler();\n        } else {\n            console.log('No specific function for this path.');\n            // Default function or behavior for unspecified paths\n        }\n    }\n    \n    \n}", "\n/*\n * SITE \n * Site-wide Code \n * \n */\n\n\n\nexport class Site {\n\n    constructor() {\n    }\n    \n    init() {\n\n        this.addActionToBookLinks();\n                    \n    }\n\n    // Function to add ?action=book to elements with the [pd-book] attribute\n    addActionToBookLinks(): void {\n        // Select all elements with the [pd-book] attribute\n        const bookElements = document.querySelectorAll('[pd-book]') as NodeListOf<HTMLAnchorElement>;\n    \n        // Iterate over the selected elements\n        bookElements.forEach(element => {\n        const currentHref = element.getAttribute('href');\n        if (currentHref) {\n            // Update the href attribute with the new query parameter\n            element.setAttribute('href', `${currentHref}?action=book`);\n        }\n        });\n    }\n  \n}  \n\n    \n/*\nold code\n\n// Define the lookup table for locales and their corresponding path prefixes\nconst localePaths = {\n    \"en\": \"\", // Assuming \"en\" is the primary locale and has no prefix\n    \"zh\": \"/zh\", // Example for Chinese\n    // Add more locales and their prefixes as needed\n};  \n  \n// Function to determine the current page's locale\nfunction getCurrentLocale() {\n    return document.documentElement.lang || \"en\"; // Default to \"en\" if no lang attribute is found\n}  \n  \n// Function to update the href attributes for links with the custom attribute \"wfu-local-url\"\nfunction updateLinksForLocale() {\n    const currentLocale = getCurrentLocale();\n  \n  console.log(currentLocale)\n  \n    const pathPrefix = localePaths[currentLocale] || \"\"; // Default to empty string if the locale is not found in the lookup table\n    \n   console.log(pathPrefix)\n  \n    // Find all links with the custom attribute \"wfu-local-url\"\n    const links = document.querySelectorAll('a[wfu-locale-url]');\n    \n    links.forEach(link => {\n        // Prepend the pathPrefix to the href attribute, if it's not already there\n        if (!link.href.startsWith(pathPrefix)) {\n            // Ensure to handle absolute URLs correctly\n            // Extract the base URL if the href is absolute, and then prepend the pathPrefix\n            const baseUrl = link.href.replace(window.location.origin, \"\");\n            link.href = `${window.location.origin}${pathPrefix}${baseUrl}`;\n        }\n    });\n}  \n  \n// Call updateLinksForLocale to update links as soon as the script runs\nupdateLinksForLocale();  \n  \n  \n//   $(\"[wfu-query]\").each(function() {\n//     console.log($(this).attr(\"href\"));\n//     const url = new URL($(this).attr(\"href\"),\n//                        window.location.origin\n//                        );\n    \n//     const params = url.searchParams;\n//     const newParams = new URLSearchParams($(this).attr(\"wfu-query\"));\n    \n//     console.log(params.toString());\n//     console.log(newParams.toString());\n    \n//   });\n  \n  \n});\n\n// Google Tag Manager Tracking\n$(\"[wfu-gtm-event]\").click(function() {\n  console.debug('Button clicked - GTM tracking');\n  var data = {\n    'event': $(this).attr('wfu-gtm-event')\n  };\n\n  // Find GTM Event attributes\n  // and add to dataLayer\n  const dataLayerAttrPrefix = \"wfu-gtm-event-\";\n  $.each(this.attributes, function() {\n       console.debug(`attr ${this.name}`); \n    \n     if(this.name.startsWith(dataLayerAttrPrefix)) {\n       var dataLayerVar = this.name.substring(dataLayerAttrPrefix.length);\n       console.debug(`wfu-attr ${dataLayerVar} ${this.value}`); \n       data[dataLayerVar] = this.value;\n      }\n   });\n  \n  dataLayer.push(data);\n  console.log(JSON.stringify(data,null,3));\n  \n});\n*/    ", "export const VERSION = \"0.1.2\"; ", "/*\n * SITE\n * Main entry point\n * \n */\n\nimport { ClinicPage } from \"./page/clinic\";\nimport { ServicesPage } from \"./page/services\";\nimport { RouteDispatcher } from \"./routeDispatcher\";\nimport { Site } from \"./site\";\nimport { VERSION } from \"./version\";\n\n// Global vars\nconst SITE_NAME = 'Site';\n//const VERSION = 'v0.1.8';\n\n// Global Site object\n// window['Site'] = window['Site'] || {}; \n// var Site = window['Site'];\n\n\ndeclare global {\n    interface Window {\n        data: WindowData;\n    }\n}\n\n\nconst init = () => {\n    \n    console.log(`%c${SITE_NAME} package init ${VERSION}`, \"color: blue;\");\n    // console.log(\"%c\uD83D\uDCF6 Signal Site Engine: Initialization complete\", \"color: blue; background: url('https://assets.sygnal.com/https://cdn.prod.website-files.com/59b8d49f7fdf9700017d780f/59b8d57a646143000180fcca_sygnal-logo-small.png') no-repeat left center; padding-left: 20px;\");\n    // console.log(\"%c\uD83D\uDCF6 Signal Site Engine: Initialization complete\", \"color: blue; background: url('https://assets.sygnal.com/https://cdn.prod.website-files.com/59b8d49f7fdf9700017d780f/59b8d57a646143000180fcca_sygnal-logo-small.png') no-repeat left center; padding-left: 20px;\");\n\n    (new Site().init()); \n    \n    var routeDispatcher = new RouteDispatcher();\n    routeDispatcher.routes = {\n        '/': () => {\n\n            // No special code\n\n        },\n        '/services/*': () => {\n\n            (new ServicesPage()).init();\n\n        },\n        '/clinics/*': () => {\n\n            (new ClinicPage()).init();\n\n        },\n\n    };\n    routeDispatcher.dispatchRoute(); \n\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", init)"],
  "mappings": "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",
  "names": []
}
