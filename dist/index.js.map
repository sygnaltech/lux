{
  "version": 3,
  "sources": ["../src/page/clinic.ts", "../src/routeDispatcher.ts", "../src/index.ts"],
  "sourcesContent": ["\n/*\n * SITE \n * Page | Clinic \n * \n */\n\n// import { TocFix } from \"../tocfix\";\n// import Plyr from 'plyr';\n// // import QRCode from 'qrcode';\n// import { AdjustTrackingUrl } from \"../adjust\";\n// import { AdjustTrackingQr } from \"../adjust-qr\";\n\n//const url: string = 'https://www.sygnal.com?thisisatrackingurlthsfdsfsdsdatdoesstuff';\n\n\nexport class ClinicPage {\n\n    constructor() {\n    }\n    \n    init() {\n\n        /**\n         * Fix links for the ToC \n         */\n\n        // let tocFix = new TocFix();\n        // tocFix.init(); \n\n//         window['fsAttributes'] = window['fsAttributes'] || [];\n//         window['fsAttributes'].push([\n//           'toc',\n//           (tableInstances) => {\n\n//             tocFix.addToCCloseLinks();\n\n// //            console.log('toc Successfully loaded!');\n//           },\n//         ]);\n\n//         /**\n//          * Wire up components embedded\n//          * in Finsweet PRT RTB's\n//          */\n\n//         window['fsAttributes'] = window['fsAttributes'] || []; \n//         window['fsAttributes'].push([  \n//           'richtext',   \n//           (textInstances) => {   \n\n//             this.initAfterFsPRTLib();\n// //            console.log('richtext Successfully loaded!');      \n//           },   \n//         ]);    \n\n\n        // // Look for all links with a [code] attribute\n        // // and apply it to the link's querystring as ?code=VALUE. \n\n        // // Get all links with the 'code' attribute\n        // const links: NodeListOf<HTMLAnchorElement> = document.querySelectorAll('a[code]');\n\n        // links.forEach((link: HTMLAnchorElement) => {\n        //     // Get the value of the 'code' attribute\n        //     const codeValue: string = link.getAttribute('code') || '';\n\n        //     // Use the URL interface to handle the href\n        //     const url: URL = new URL(link.href);\n            \n        //     // Use URLSearchParams to set the code parameter\n        //     url.searchParams.set('code', codeValue);\n\n        //     // Update the link href\n        //     link.href = url.toString();\n        // });\n                    \n    }\n\n}  \n\n    \n    \n    \n    ", "/*\n * RISE\n * Main entry point\n * \n */\n\ntype RouteHandler = () => void;\n\nexport interface Routes {\n    [path: string]: RouteHandler;\n}\n\nconst routes: Routes = {\n    '/': () => {\n        console.log('This is the homepage.');\n        // Your function for the homepage\n    },\n    '/about': () => {\n        console.log('This is the about page.');\n        // Your function for the about page\n    },\n    '/contact': () => {\n        console.log('This is the contact page.');\n        // Your function for the contact page\n    },\n    // ... add more routes as needed\n};\n\nexport class RouteDispatcher {\n\n    routes: Routes;\n\n    constructor() {\n//        this.routes = {};\n    }\n\n    matchRoute(path: string): RouteHandler | null {\n        for (const route in this.routes) {\n            if (route.endsWith('*')) {\n                // If the route ends with *, treat it as a wildcard\n                const baseRoute = route.slice(0, -1); // Remove the * from the end\n                if (path.startsWith(baseRoute)) {\n                    return this.routes[route];\n                }\n            } else if (route === path) {\n                // Exact match\n                return this.routes[route];\n            }\n        }\n        return null; // No matching route found\n    }\n    \n    dispatchRoute() {\n        const path = window.location.pathname;\n        const handler = this.matchRoute(path);\n        if (handler) {\n            handler();\n        } else {\n            console.log('No specific function for this path.');\n            // Default function or behavior for unspecified paths\n        }\n    }\n    \n    \n}", "/*\n * SITE\n * Main entry point\n * \n */\n\nimport { ClinicPage } from \"./page/clinic\";\nimport { RouteDispatcher } from \"./routeDispatcher\";\n\n// Global Rise object\nwindow['Site'] = window['Site'] || {}; \nvar Rise = window['Site'];\n\nconst init = () => {\n\n    console.log(\"SITE package init v0.0.1\");\n\n    \n    var routeDispatcher = new RouteDispatcher();\n    routeDispatcher.routes = {\n        '/': () => {\n\n            // No special code\n\n        },\n        '/clinics/*': () => {\n\n            (new ClinicPage()).init();\n\n        },\n\n    };\n\n    console.log('loaded')\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", init)"],
  "mappings": ";;AAgBO,MAAM,aAAN,MAAiB;AAAA,IAEpB,cAAc;AAAA,IACd;AAAA,IAEA,OAAO;AAAA,IAwDP;AAAA,EAEJ;;;ACnDO,MAAM,kBAAN,MAAsB;AAAA,IAIzB,cAAc;AAAA,IAEd;AAAA,IAEA,WAAW,MAAmC;AAC1C,iBAAW,SAAS,KAAK,QAAQ;AAC7B,YAAI,MAAM,SAAS,GAAG,GAAG;AAErB,gBAAM,YAAY,MAAM,MAAM,GAAG,EAAE;AACnC,cAAI,KAAK,WAAW,SAAS,GAAG;AAC5B,mBAAO,KAAK,OAAO;AAAA,UACvB;AAAA,QACJ,WAAW,UAAU,MAAM;AAEvB,iBAAO,KAAK,OAAO;AAAA,QACvB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IAEA,gBAAgB;AACZ,YAAM,OAAO,OAAO,SAAS;AAC7B,YAAM,UAAU,KAAK,WAAW,IAAI;AACpC,UAAI,SAAS;AACT,gBAAQ;AAAA,MACZ,OAAO;AACH,gBAAQ,IAAI,qCAAqC;AAAA,MAErD;AAAA,IACJ;AAAA,EAGJ;;;ACtDA,SAAO,UAAU,OAAO,WAAW,CAAC;AACpC,MAAI,OAAO,OAAO;AAElB,MAAM,OAAO,MAAM;AAEf,YAAQ,IAAI,0BAA0B;AAGtC,QAAI,kBAAkB,IAAI,gBAAgB;AAC1C,oBAAgB,SAAS;AAAA,MACrB,KAAK,MAAM;AAAA,MAIX;AAAA,MACA,cAAc,MAAM;AAEhB,QAAC,IAAI,WAAW,EAAG,KAAK;AAAA,MAE5B;AAAA,IAEJ;AAEA,YAAQ,IAAI,QAAQ;AAAA,EACxB;AAEA,WAAS,iBAAiB,oBAAoB,IAAI;",
  "names": []
}
