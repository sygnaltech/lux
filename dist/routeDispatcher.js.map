{
  "version": 3,
  "sources": ["../src/site.ts", "../src/routeDispatcher.ts"],
  "sourcesContent": ["\n/*\n * Site\n */\n\nimport { IRouteHandler } from \"./IRouteHandler\";\n\n// import gsap from 'gsap'; \n \n\nexport class Site implements IRouteHandler {\n\n  constructor() {\n  }\n\n  setup() {\n        \n  }\n\n  exec() {\n\n    console.log(\"Site.\"); \n\n    // const elements: NodeListOf<Element> = document.querySelectorAll(`.${item.className}`);\n    // console.log(\"Making elements visible\", elements);\n    // gsap.to(elements, { display: 'block' });\n\n  }\n\n}\n", "/*\n * Sygnal\n * Route Dispatcher\n * \n */\n\nimport { IRouteHandler } from \"./IRouteHandler\";\nimport { Site } from \"./site\";\n\ntype RouteHandler = () => void;\ntype RouteHandlerClass = { new (): IRouteHandler };\n\nexport interface Routes {\n    [path: string]: RouteHandlerClass;\n}\n\n// Example routes\nconst routes: Routes = {\n    // '/': ,\n    // '/about': () => {\n    //     console.log('This is the about page.');\n    // },\n    // '/contact/*': () => {\n    //     console.log('This is the contact page.');\n    // },\n};\n// const routes: Routes = {\n//     '/': () => {\n//         console.log('This is the homepage.');\n//     },\n//     '/about': () => {\n//         console.log('This is the about page.');\n//     },\n//     '/contact/*': () => {\n//         console.log('This is the contact page.');\n//     },\n// };\n\nexport class RouteDispatcher {\n\n    routes: Routes;\n\n    constructor() {\n//        this.routes = {};\n    }\n\n    matchRoute(path: string): RouteHandlerClass | null {\n        for (const route in this.routes) {\n            if (route.endsWith('*')) {\n                // If the route ends with *, treat it as a wildcard\n                const baseRoute = route.slice(0, -1); // Remove the * from the end\n                if (path.startsWith(baseRoute)) {\n                    return this.routes[route];\n                }\n            } else if (route === path) {\n                // Exact match\n                return this.routes[route];\n            }\n        }\n        return null; // No matching route found\n    }\n    \n    setupRoute() {\n\n        // Pre-init site-level\n        (new Site().setup());\n\n        // Pre-init route-level\n        const path = window.location.pathname;\n        const HandlerClass = this.matchRoute(path);\n        if (HandlerClass) {\n            const handlerInstance = new HandlerClass();\n            handlerInstance.setup(); \n        } else {\n//            console.log('No specific function for this path.');\n        }\n    }\n\n    execRoute() {\n\n        // Init site-level\n        (new Site().exec());\n\n        // Init route-level\n        const path = window.location.pathname;\n        const HandlerClass = this.matchRoute(path);\n        if (HandlerClass) {\n            const handlerInstance = new HandlerClass();\n            handlerInstance.exec(); \n        } else {\n//            console.log('No specific function for this path.');\n        }\n    }\n    \n}"],
  "mappings": ";;AAUO,MAAM,OAAN,MAAoC;AAAA,IAEzC,cAAc;AAAA,IACd;AAAA,IAEA,QAAQ;AAAA,IAER;AAAA,IAEA,OAAO;AAEL,cAAQ,IAAI,OAAO;AAAA,IAMrB;AAAA,EAEF;;;ACSO,MAAM,kBAAN,MAAsB;AAAA,IAIzB,cAAc;AAAA,IAEd;AAAA,IAEA,WAAW,MAAwC;AAC/C,iBAAW,SAAS,KAAK,QAAQ;AAC7B,YAAI,MAAM,SAAS,GAAG,GAAG;AAErB,gBAAM,YAAY,MAAM,MAAM,GAAG,EAAE;AACnC,cAAI,KAAK,WAAW,SAAS,GAAG;AAC5B,mBAAO,KAAK,OAAO;AAAA,UACvB;AAAA,QACJ,WAAW,UAAU,MAAM;AAEvB,iBAAO,KAAK,OAAO;AAAA,QACvB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IAEA,aAAa;AAGT,MAAC,IAAI,KAAK,EAAE,MAAM;AAGlB,YAAM,OAAO,OAAO,SAAS;AAC7B,YAAM,eAAe,KAAK,WAAW,IAAI;AACzC,UAAI,cAAc;AACd,cAAM,kBAAkB,IAAI,aAAa;AACzC,wBAAgB,MAAM;AAAA,MAC1B,OAAO;AAAA,MAEP;AAAA,IACJ;AAAA,IAEA,YAAY;AAGR,MAAC,IAAI,KAAK,EAAE,KAAK;AAGjB,YAAM,OAAO,OAAO,SAAS;AAC7B,YAAM,eAAe,KAAK,WAAW,IAAI;AACzC,UAAI,cAAc;AACd,cAAM,kBAAkB,IAAI,aAAa;AACzC,wBAAgB,KAAK;AAAA,MACzB,OAAO;AAAA,MAEP;AAAA,IACJ;AAAA,EAEJ;",
  "names": []
}
